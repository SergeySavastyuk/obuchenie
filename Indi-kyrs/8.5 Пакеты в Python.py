"""Пакеты позволяют иерархически структурировать пространство имен модулей с помощью записи через точку.
Точно так же, как модули помогают избежать конфликтов между именами глобальных переменных, пакеты помогают
избежать конфликтов между именами модулей."""

# Начнём с варианта Directory. Дадим название нашему пакету package1 и внутри создадим 2 файла: file1.py, file2.py
# file1.py
a = 10
b = 20
c = 5.4
def my_func() -> None:
    pass
# file2.py
d = [1, 2, 3]
h = 'hello'


# нельзя импортировать саму папку. Но можно импортировать файл из модуля:
# main.py
import package1.file1
import package1.file2
print(package1.file1.b)
print(package1.file2.d)


# Ещё один вариант импорта – импорт определенного модуля:
# main.py
from package1 import file1
from package1 import file2
print(file1.b)
print(file2.d)


# И ещё один вариант импорта – импортирование имён из модуля:
# main.py
from package1.file1 import b
from package1.file2 import d
print(b)
print(d)


"""Теперь рассмотрим файл __init__.py, который очень часто встречается в пакетах. 
Его можно создать вручную или при помощи pycharm. Если выбрать вариант Python Package, 
создаться папка в проекте и сразу в ней будет файл __init__.py"""

"""!!!! Особенность файла __init__.py заключается в том, что он исполняемый и будет автоматически запущен в момент, 
когда данный пакет будет импортироваться."""

# __init__.py
print('__init__ package1')

# Теперь при импортировании этого пакета будет один раз высвечивать: «__init__ package1». И неважно, что вы будете
# импортировать и каким образом:

import package1.file1
from package1 import file1
from package1.file1 import b
# При любом импорте пакета, если внутри него есть файл __init__.py, он будет исполнен в первую очередь.


"""Как можно использовать файл __init__.py"""
# Чтобы «достучаться» до каких-либо переменных в file1 необходимо будет обращаться через точку следующим образом:
package1.file1.a
package1.file1.b
package1.file1.my_func()

# Но что, если при импортировании file1, мы хотим сразу обращаться к его переменным без обращения через точку?
# Здесь на помощь приходит __init__.py, т.к. внутри него тоже можно импортировать имена.
# __init__.py:
print('__init__ package1')
from file1 import *
from file2 import *
# Но при такой записи возникнет ошибка, поскольку файл не может понять где искать запрашиваемые файлы file1 и file2.
# Чтобы решить эту проблему необходимо воспользоваться относительным импортированием, т.е. указать путь относительно
# того, чего вы ищете. Здесь есть два значения:
"""
. (точка) текущий каталог
.. - каталог выше."""
# file1 и file2 находятся в одном каталоге с файлом __init__.py, поэтому перед названием файлов необходимо
# поставить точку. Таким образом, код будет следующим:

# __init__.py:
print('__init__ package1')
from .file1 import *
from .file2 import *

# Раз точка является текущим каталогом, то её можно ставить в конструкцию «from … import …». Выглядит это так:
# __init__.py:
print('__init__ package1')
from . import file1, file2


""" Инструкция __all__ """
# Стоит учитывать, что __all__ работает только со звёздочкой в импорте.
# C помощью импорта через * можно получить доступ ко всем именам в file1 и file2 (код выше). Но при этом можно в самих
# этих файлах повлиять на то, какие имена доступны для импорта при команде import * (импортировать всё).
# Для этого есть функция __all__. Сделаем так, чтобы в file1 импортировалась только переменная a:

# file1.py
__all__ = ['a'] # будет импортироваться только переменные в скобках
a = 10
b = 20
c = 5.4
def my_func() -> None:
    pass