"""документация """
"class map(object)"
"map(function, *iterables) --> map object"

print(list(map(abs, range(-10, 5))))
# или другой способ
a = [abs(i) for i in range(-10, 5)]
print(a)
print('1----------------------')

# в map можно передать свою функцию
def funs(n):
    return n ** 2
a = list(map(funs, range(-10, 5)))  # () не ставятся
print(a)
print('2----------------------')

# можно использовать методы переданных объектов
a = ['papa', 'rama', 'шла по шоссе']
print(list(map(str.upper, a)))  # () не ставятся
print(list(map(len, a)))  # () не ставятся
print('3----------------------')

# можно передавать анонимную функцию
print(list(map(lambda x: x[::-1], a)))  # в функцию передаём аргумент
# или по другому через генератор
b = [i[::-1] for i in a]
print(b)
print('4----------------------')

# можно передавать встроенные функции
print(list(map(list, a)))  # каждый элемент станет списком
b = list(map(list, a))
c = list(map(sorted, b))  # отсортируем элементы в каждом списке
print(c)

print('5----------------------')
# способ хранения несколько чисел введённых через пробел в переменной
a = '12 65 99 0 2 7 5 6 100'
print(a, type(a))
print('разбиваем по пробелу, делаем список строк, и перебираем их делая числами, и сохраняем в список')
# b = list(map(int, input().split()))
b = list(map(int, a.split()))
print(b)
print('6----------------------')

"""Ваша задача увеличить каждый элемент списка numbers втрое"""
numbers = [116, -411, 448, 636, -254, -295, 220, 216, 187, -150, -458, -372, 450, 141, -626, -168, -383, 389, -184, 609,
           221, 311, 526, 254, -631, -174, -555, -338, 226, 695, -16, 333, 12, -600, -258, -383, -101, 121, 40, 278,
           118, -462, -671, 78, -69, -568, -228, -445, -47, -565]
increase_3 = list(map(lambda x: x * 3, numbers))  # через map увеличим в трое
print(increase_3)

"""Преобразуйте закодированный код цвета в формате RGB и верните кортеж из трех значений
(оттенок_красного, оттенок_зеленого, оттенок_синего)"""

"""метод строка.strip по умолчанию удаляет пробелы,
но можно удалить и другой сивол в конце через строка.rstrip('символ') и в начале строки через строка.lstrip('символ')"""

"""Второй аргумент, который вы передаете функции int, указывает, какую систему счисления использовать для интерпретации строки. 
В случае шестнадцатеричной системы счисления, это значение обычно устанавливается на 16. 
Для восьмеричной системы счисления, это значение будет 8, а для двоичной - 2."""


def from_hex_to_rgb(color: str) -> tuple:
    color = color.lstrip('#')  # получим 87CEEB код RGB без #
    return tuple(int(color[i:i + 2], 16) for i in
                 (0, 2, 4))  # здесь берётся срез по два элемента из строки и преобразуется в число в 16-ную системы


colors = ['#B22222', '#DC143C', '#FF0000', '#FF6347', '#FF7F50', '#CD5C5C', '#F08080', '#E9967A',
          '#FA8072', '#FFA07A', '#FF4500', '#FF8C00', '#FFA500', '#FFD700', '#B8860B', '#DAA520',
          '#EEE8AA', '#BDB76B', '#F0E68C', '#808000', '#FFFF00', '#9ACD32', '#556B2F', '#6B8E23',
          '#7CFC00', '#7FFF00', '#ADFF2F']
for red, green, blue in map(from_hex_to_rgb, colors):
    print(f"Red={red}, Green={green}, Blue={blue}")

"""На вход поступают английские буквы через пробел в верхнем или маленьком регистре. нужно сформировать список кортежей.
сперва буква в верхнем регистре, а затем в нижнем"""
print([(i.upper(), i.lower()) for i in
       input().split()])  # T y k P e -> [('T', 't'), ('Y', 'y'), ('K', 'k'), ('P', 'p'), ('E', 'e')]

"""нужно каждый кортеж замениться на строку конкатенации имени и фамилии, между которыми стоит пробел"""
names = [('Monica', 'Waters'), ('Juan', 'Lee'), ('Donna', 'Walker')]
new_names = list(map(lambda x: x[0] + ' ' + x[1], names))
print(new_names)  # ['Monica Waters', 'Juan Lee', 'Donna Walker']

'''отобрать информацию о номерах телефона и сложить их в отдельный список '''  # из списка словарей через лямбду достанем значения нужных ключей
persons = [{'name': 'Andrew Hernandez', 'phone': '680-436-8521x3468'}, {'phone': '602.518.4130'}]
phones = list(map(lambda x: x['phone'], persons))
print(phones)  # ['680-436-8521x3468', '602.518.4130']

"""Функция map и несколько последовательностей"""
"""функция map может принимать произвольное количество последовательностей. 
В таком случае будут браться по порядку элементы стоящие на одинаковых местах из всех коллекций и по очереди 
передаваться на вход функции func. Количество параметров функции func должно совпадать с количеством последовательностей."""
bases = [10, 20, 30, 40, 50]
exponents = [1, 2, 3, 4, 5]
result = list(map(pow, bases, exponents))
print(result)  # [10, 400, 27000, 2560000, 312500000]
# другой пример
nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
nums3 = [7, 8, 9]
result = map(lambda x, y, z: x + y + z, nums1, nums2, nums3)
print(list(result))  # [12, 15, 18]
