'''распечатает все натуральные числа от 1000 до 2000 включительно'''
print(*range(1000, 2001), sep='\n')

'''У Василия есть a свечей. Когда Василий зажигает новую свечу, она горит ровно один час, 
а затем тухнет. из b потухших свечей он получать одну свечу. сколько часов будут гореть'''
a, b = map(int, input().split())
print((a * b - 1) // (b - 1))

'''Пользователь вводит целые числа по одному в строке, последовательность оканчивается числом 0. Все, 
что вводится после 0 не относится к последовательности. Напишите программу, 
которая выводит сумму всех членов данной последовательности.'''
s = 0
while n:=int(input()):
    s += n
print(s)
# другой способ
print(sum(map(int, iter(input, '0'))))

'''Число v – вместимость рюкзака. Далее идут произвольное количество строк – объем очередного предмета.
Строка "Довольно!" и затем два числа – суммарный объем упакованных товаров и их количество.'''
v = int(input())
summa = 0
count = 0
n = 0
while summa<=v:
    summa += (n:=int(input()))
    count += 1
print(f"Довольно!\n{summa-n}\n{count-1}")
# другой более практичный способ
v, summa = int(input()), []
while sum(summa) <= v:
    summa.append(int(input()))
print('Довольно!', sum(summa[:-1]), len(summa) - 1, sep='\n')

'''Слить два списка в один в порядке неубывания и вывести элементы полученного списка'''
l = (list(map(int,input().split())) + list(map(int,input().split())))
while l:
    print(l.pop(l.index(min(l))), end = ' ')

'''В первой строке записано целое число n — количество юношей. 
Вторая строка содержит последовательность, где ai — умение танцевать i-го юноши.
третья строка содержит целое m – количество девушек. 
В четвертой строке содержится последовательность, где bj — умение танцевать j-й девушки.
Выведите единственное число — искомое максимальное возможное количество пар.'''
m, y, w, x = [sorted([*map(int,input().split())]) for i in range(4)]
for i in y:
    for j in x:
        if abs(i-j) <= 1:
            x.remove(j)
print(w[0]-len(x))

'''Программа принимает на вход одно натуральное число и выводит его цифры в столбик в обратном порядке.'''
n=int(input())
while n>0:
    print(n%10)
    n=n//10
# другой способ
print(*input()[::-1], sep='\n')

print(sum(map(int, input())))

'''Программа принимает на вход одно натуральное число и выводит на экран произведение цифр данного числа'''
print(eval('*'.join(input())))
# Функция eval() в Python используется для синтаксического анализа строки выражения, как выражения Python и последующего
# ее выполнения. Синтаксис функции: eval(expression, globals=None, locals=None) expression – обязательный строковый
# параметр, он анализируется и выполняется, как выражение Python. globals – словарь, используемый для определения
# доступных для выполнения выражений. Стандартные встроенные методы доступны, если явно не ограничены с помощью
# элемента ‘__builtins__’: None. locals – используется для указания локальных переменных и методов, доступных
# для функции eval().

'''вход одно натуральное число и выводит на экран минимальную и максимальную цифры данного числа в отдельных строчках'''
print(min(n := list(map(int, input()))), max(n), sep='\n')

'''вход одно натуральное число и выводит его цифры в двоичной системе в столбик в обратном порядке.'''
print(*bin(int(input()))[2:][::-1], sep='\n')

'''Дано натуральное число N. Определить, является ли оно простым. 
Натуральное число N называется простым, если у него есть только два делителя: единица и само число N. '''
n = int(input())
i = 1
box = []
while i*i <=n:
    if n%i==0:
        box.append(i)
        if i!=n//i:
            box.append(n//i)
    i+=1
print('Yes'if len(box)==2 else 'No' )
# другой способ
a=int(input())
i=2
while a%i!=0 and i<a:
    i+=1
print('Yes' if i==a else 'No')

'''Программа получает на вход натуральное число N. Нужно найти сумму его делителей'''
n = int(input())
print(sum(i for i in range(1, n + 1) if n % i == 0))

'''необходимо найти НОД двух чисел'''
a,b = map(int, input().split())
while b !=0: a,b = b,a%b
print(a)
# другой способ
from math import gcd # функцией gcd(a, b), которая принимает два числа и находит наибольший общий делитель для них
from functools import reduce
# Функция reduce(function, iterable[, initializer]) модуля functools кумулятивно применяет функцию function к
# элементам итерируемой последовательности, сводя ее к единственному значению. Если присутствует необязательный
# аргумент initializer, он помещается перед элементами iterable в вычислении. initializer — это базовое значение,
# с которого требуется начать отсчет. Он также служит значением по умолчанию, когда итерируемый объект является пустым.
print(reduce(gcd, [int(input()) for _ in range(int(input()))])) # 4 24 60 48 12 -> 12

'''Даны два натуральных числа A и B. Требуется найти их наименьшее общее кратное (НОК).'''
a,b = map(int, input().split())
c = a*b
while b !=0: a,b = b,a%b
print(c//a)

'''Программа получает на вход натуральное число n > 1. Выведите минимальный делитель этого числа, отличный от единицы.'''
n = int(input())
print([i for i in range(1, n + 1) if n % i == 0][1])

'''пропускать числа, которые делятся на 2 или на 3. если встречаете число, кратное 777,
необходимо принудительно закончить цикл, само это число не выводить.
Вывести все числа на интервале от a до b включительно'''
a, b = int(input()), int(input())
while a <= b:
    if a == 777:
        break
    if a % 2 and a % 3:
        print(a)
    a += 1
'''Гипотеза Коллатца'''
n, s = int(input()),0
while n!=1:
    n = n//2 if n%2==0 else (n*3)+1
    s+=1
print(s)

"""перебор букв"""
x=input().replace('a','e').split('e')
print('\nТекущая буква: '.join(' '+ x[0])[2:])
print(['Распечатали все буквы','Ага! Нашлась'][len(x)>1])