# Метод __setattr__ - вызывается при установке значения атрибута объекта и позволяет определить поведение
# при установке значения атрибута объекта. Метод __setattr__ - вызывается независимо от того, существует
# ли этот атрибут или нет. Внутри метода __setattr__ необходимо использовать функцию super() для вызова
# оригинальной реализации метода из родительского класса.

# Синтаксис
def __setattr__(self, name, value):
    super().__setattr__(name, value)  # устанавливает значение value атрибуту name
# self - ссылка на сам объект
# name - имя атрибута
# value - значение, которое требуется установить


# Пример 1
# Определение дополнительных действий при установке значения атрибута:
class Person:
    def __setattr__(self, name, value):
        if name == 'name':
            print(f"Создали атрибут name со значением {value}")
        super().__setattr__(name, value)
person = Person()
person.name = "Vasya"  # Создали атрибут name со значением Vasya
person.name = "Masha"  # Создали атрибут name со значением Masha
# В примере, мы объявили метод __setattr__ и создали условие. Теперь, при каждой установке значения атрибуту name,
# мы будем получать сообщение "Создали атрибут name со значением <...>". Командой super().__setattr__(name, value)
# - установили значение атрибуту.


# Пример 2
# Проверка и фильтрация значений атрибутов:
class Person:
    def __setattr__(self, name, value):
        if name == 'age' and value < 0:
            raise ValueError("возраст не может быть отрицательным")
        else:
            super().__setattr__(name, value)  # устанавливает значение value атрибуту name
person = Person()
person.age = 25
person.age = -5  # вызывает ошибку ValueError
# Данный код демонстрирует, что если значение атрибута age меньше 0, то будет вызвано исключение ValueError.


# Пример 3
# Запрет изменения определенных атрибутов объекта:
class Immutable:
    def __setattr__(self, name, value):
        raise AttributeError(f"Нельзя создавать объект")
immutable_obj = Immutable()
immutable_obj.name = "Vasya"  # AttributeError: Нельзя создавать объект
# В данном примере мы не используем команду super().__setattr__(name, value) ,
# тем самым мы никогда не установим значение атрибутам этого класса.
# При установке будет вызвано исключение AttributeError. Другими словами мы создали метод,
# запрещающий установку значений атрибуту.

# Назначение
# Определение дополнительных действий при установке значения атрибута.
# Проверка и фильтрация значений атрибутов перед их установкой.
# Запрет изменения определенных атрибутов объекта.
# Важные моменты
# Внутри метода __setattr__ необходимо использовать функцию super() для вызова оригинальной реализации метода
# из родительского класса. По умолчанию команда установки значения выглядит так: super().__setattr__(name, value),
# она позволяет избежать зацикливания вызовов.