
"""В Python оператор raise используется для генерации исключений. Он позволяет программисту явно указать,
что произошла ошибка или некорректная ситуация, и вызвать соответствующее исключение."""

# Синтаксис
# raise [ExceptionType("Error message")]
# Где ExceptionType - это тип исключения, которое нужно сгенерировать, а "Error message" - это опциональное
# сообщение об ошибке, которое будет выводиться при возникновении исключения.

"""Пример 1. Генерация исключения"""
def count(x, y):
    if y == 0:
        raise ZeroDivisionError('в функции count, y = 0, на ноль делить нельзя')
    return x / y
try:
    result = count(5, 0)
except ZeroDivisionError as zero:
    print(zero)  # в функции count, y = 0, на ноль делить нельзя
else:
    print(result)
# В примере, если пользователь назначит ноль в аргумент y, вызовется исключение ZeroDivisionError с нашим комментарием.
# Обратите внимание, что в блоке except появился наш комментарий, а не системный.
# Такой способ позволяет более точно понять, где возникла ошибка.


# Пример 2. Создание пользовательского исключения
# Для создания пользовательского исключения в Python нужно определить новый класс, который наследуется от класса Exception или его подклассов.
class Atata(Exception):
    pass
def count(x, y):
    if y == 0:
        raise Atata('y = 0, на ноль делить нельзя, а-та-та')
    return x / y
try:
    result = count(5, 0)
except Atata as zero:
    print(zero)  # y = 0, на ноль делить нельзя, а-та-та
else:
    print(result)
# В примере, код тот же самый, что и в примере 1, но здесь мы создаём класс Atata, который наследуется от класса
# исключения Exception. Далее, если будет операция деления на ноль, вызовется исключение Atata и наш комментарий.
# Создание пользовательских исключений может упростить обработку ошибок и сделать код более читаемым и понятным.
