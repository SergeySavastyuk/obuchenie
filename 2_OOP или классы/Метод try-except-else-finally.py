
# Синтаксис
try:
    pass    # Код, который может вызвать исключение
except:
    pass    # Код, который обрабатывает исключение
# В строке except вы можете ничего не указывать, а можете указать конкретный класс исключения, например:

try:
    pass    # Код, который может вызвать исключение
except ZeroDivisionError:
    pass    # Код, который обрабатывает при делении на ноль
# Для более точного обнаружения ошибки, лучше указать класс исключения или даже использовать несколько блоков except.

try:
    pass    # Код, который может вызвать исключение
except ValueError:
    pass    # Код, который обрабатывает исключение ValueError
except ZeroDivisionError:
    pass    # Код, который обрабатывает исключение ZeroDivisionError
except:
    pass    # Код, который обрабатывает все остальные исключения

"""Как это работает"""
# Если в участке кода, в try, возникает ошибка, интерпретатор вызывает конкретное исключение, исходя из ошибки.
# Если вы не знаете какая ошибка может возникнуть, то используйте одно слово except, тогда этот блок будет
# активироваться при любом возникновении исключения. Если вы указали несколько блоков исключений,
# то при возникновении ошибки, интерпретатор будет искать подходящие исключение в ваших блоках except,
# начиная сверху вниз. Если блок исключения соответствует возникшей ошибке, то активируется только этот блок,
# и остальные блоки активироваться не будут. Если среди указанных вами блоков подходящего исключения нет,
# то программа может завершиться аварийно.
"""Если у вас в коде несколько ошибок, то конструкция try-except выдаст отчёт только по первой встретившейся ошибке."""

"""except as
У блока except можно использовать конструкцию except as имя_переменной. 
Это позволяет получить доступ к информации об исключении, такой как его тип, сообщение об ошибке и другие атрибуты, 
и использовать эту информацию для вывода сообщений об ошибке или отладки программы."""
try:
    x = 1 / 0
except Exception as p:
    print(f"{p}, {type(p)}")
# division by zero, <class 'ZeroDivisionError'>

# В этом примере, если в блоке try возникнет исключение, то будет выведенa информация об исключении,
# которая будет сохранена в переменной p. Это позволяет более детально отслеживать ошибки и выводить информацию об
# исключении в консоль для отладки. Говоря простым языком, вы можете не использовать свои комментарии,
# а использовать системные комментарии об ошибке или классе исключения.
# В блоке except мы использовали класс исключения Exception, так как от него наследуются почти все исключения.
# И при возникновении любого исключения, этот класс исключения сохранится в переменную p . Этот способ является
# универсальным, чтобы максимально точно определить класс возникшего исключения.

"""except и except Exception, это одно и тоже?
Блок except и блок except Exception - это не одно и то же. Конструкция except без аргументов перехватывает все 
исключения, включая прерывание с клавиатуры и системный выход, и поэтому практически не используется. 
Вместо этого чаще всего перехватывают исключения по одному (используя несколько except), для упрощения отладки.
 Для перехвата всех исключений можно использовать конструкцию except Exception."""


# Помимо try-except, в конструкции могут присутствовать else и finally. Блок else выполняется только в том случае,
# если в блоке try не возникло исключение. Блок finally используется для выполнения кода, независимо от того,
# возникло исключение или нет. Блок finally содержит код, который должен быть выполнен в любом случае.
# Блоки else и finally являются не обязательными блоками.
try:
    pass    # Код, который может вызвать исключение
except Exception:
    pass    # Код, который обрабатывает исключение
else:
    pass    # Код, который выполняется, если исключение не возникло
finally:
    pass    # Код, который выполняется в любом случае

# Пример 2
# Обработка исключения с использованием finally
try:
    f = open("file.txt")
    # Код для работы с файлом
finally:
    f.close()
# Данный код открывает файл "file.txt" в блоке try и выполняет код для работы с файлом.
# В блоке finally происходит закрытие файла с помощью метода close(). Таким образом,
# данный код обеспечивает корректное закрытие файла, даже если в процессе работы с ним возникнет исключение.


# Вложенные try-except
# На подобие вложенных if-else, мы можем использовать вложенные блоки try-except.
try:
    x = int(input())
    y = int(input())
    try:
        z = x / y
    except ZeroDivisionError as zero:
        z = zero
except Exception as ex:
    print(ex)
else:
    print(z)
# В блоке try пользователю предлагается ввести два числа x и y.
# Затем выполняется вложенный блок try, в котором происходит деление x на y и результат сохраняется в переменную z.
# Если при делении возникает исключение ZeroDivisionError, оно перехватывается в блоке except,
# и в переменную z присваивается zero, текст сообщения об ошибке.
# Если при вводе чисел возникает исключение Exception (например, если пользователь вводит не числа),
# оно также перехватывается в блоке except, и сообщение об ошибке выводится на экран.
# Если ни одно исключение не возникло, то блок else выполняется, и значение переменной z выводится на экран.