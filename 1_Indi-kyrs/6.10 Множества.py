""" Выведите единственное число — количество различных букв в множестве Антона. """
print(len(set(input())-set('{}, '))) # {b, a, b, a} -> 2

"""операции с множествами"""
# Пересечение множеств - Результатом пересечения множеств будет являться другое множество
set_a = {31, 37, 39, 41, 47, 58, 60, 62, 70, 75}
set_b = {0, 1, 8, 16, 17, 18, 22, 24, 29, 31}
print(len(set_a&set_b))

# Объединение множеств - Результатом объединения множеств будет являться другое множество
print(len(set_a|set_b))

# Разность множеств
print(len(set_a-set_b))
print(len(set_b-set_a))

# Симметрическая разность множеств - это операция, позволяющая получить новое множество,
# в которое включены все элементы двух множеств, не принадлежащие одновременно обоим исходным множествам.
print(len(set_a^set_b))

""" Ваша задача вывести на экран количество уникальных слов, длина которых больше 6. """
words = ['mention', 'soup', 'pneumonia', 'tradition', 'concert', 'tease', 'generation']
print(sum(1 for i in set(words) if len(i)>6) )

# Подмножество
# Множество A является подмножеством B, если все элементы A также являются элементами B.

"""Сперва поступает натуральное число N - количество списков
В следующих N строк вводятся значения каждого списка, разделенные через пробел
Вывести на отдельной строке количество различных чисел каждого введенного списка в том же порядке, 
в котором вводились списки"""
# 5
# 1
# 1 2 3
# 1 2 3 4 4 4 3 4 1 2
# 123 1000 800 123
# 98 832 32 4 343 242 42 432
print(*[len(set(input().split())) for _ in range(int(input()))], sep='\n')

""" Методы множеств """
# Множество является изменяемым объектом, поэтому вызов метода множества может оказывать влияние на состояние
# самого множества, у которого вызывается метод, без оператора присвоения. Например, может увеличиться или
# уменьшиться количество элементов множества

# Метод .copy() копирует элементы оригинального множества в новое множество. При этом вы можете сохранить новое
# множество в отдельную переменную и, вызвав функцию id, вы увидите, что перед вами совершенно новый объект

# Метод .clear() очищает все множество от его элементов, тем самым происходит полная очистка.
# В итоге после вызова метода .clear() ваша переменная будет ссылаться на пустое множество

# Метод .remove() позволяет удалить элемент из множества. Если указать элемент, который отсутствует в множестве,
# возникнет ошибка KeyError.

# Метод .discard() позволяет удалить элемент из множества, но в отличие от метода .remove() не возникнет
# ошибки при попытке удалить несуществующий элемент.

# Метод .pop()  вернет произвольный элемент из множества, а затем удалит его. При попытке вызвать метод у
# пустого множества возникнет ошибка KeyError: 'pop from an empty set'

# Метод .add() позволяет добавить новый элемент в множество. Метод оказывает изменение на состояние самого
# множества без присвоения. Если вы пытаетесь добавить элемент, который уже существует в множестве,
# ничего не произойдет и ошибок никаких не будет. В метод .add() передается только одно значение и оно обязательно
# должно быть неизменяемым типом данных. Если необходимо добавить несколько значений, то необходимо несколько раз
# вызвать метод .add(). В случае, если вы передадите словарь или например список, произойдет ошибка

# Метод .update() позволяет добавить сразу несколько элементов. Метод .update() может принимать произвольное
# количество любых объектов, поддерживающий итерацию по своим элементам. Это могут быть списки, кортежи,
# другое множество и т.д. Дублирующие элементы последовательностей игнорируются, само множество после вызова меняется.
# По сути метод .update() выполняет операцию объединения элементов нескольких коллекций,
# сохраняя результат сразу в множестве, у которого данный метод был вызван

""" дополнительные методы """
# Метод .union() позволяет выполнить операцию объединения. Метод .union() может принимать произвольное количество
# любых объектов, поддерживающих итерацию по своим элементам. Это могут быть списки, кортежи, другое множество и т.д.
# Дублирующие элементы последовательностей игнорируются. Результатом вызова метода .union() будет новое множество, или,
# другими словами, новый объект множества. Метод не изменяет значения того множества, у которого метод вызывался
set_num = {1, 2, 3}
print(set_num.union('abcd', (2, 3, 4, 5))) # {1, 2, 3, 4, 5, 'c', 'd', 'b', 'a'}

# Метод .intersection() позволяет выполнить операцию пересечения.  Результатом будет НОВОЕ множество куда войдут
# только те элементы, которые встречаются во всех коллекциях.

# Метод .intersection_update() позволяет выполнить операцию пересечения. Метод .intersection_update() может принимать
# произвольное количество любых объектов, поддерживающих итерацию по своим элементам. Результатом вызова
# метода .intersection_update() будет не создание нового множества, а изменение существующего. Присваивать ничего
# не нужно, автоматически после вызова изменится множество, у которого данный метод был вызван. При попытке сохранить
# результат вызова этого метода  в переменную, в ней сохранится значение None

# Метод .difference() позволяет выполнить операцию «разность множеств». Результатом будет новое множество куда войдут
# только элементы из операции разности множеств.

# Метод .difference_update() позволяет выполнить операцию «разность множеств».
# Результатом вызова метода .difference_update() будет не создание нового множества, а изменение существующего.

# Метод .symmetric_difference() позволяет выполнить операцию «симметрическая разность». Метод .symmetric_difference()
# может принимать только один объект, поддерживающих итерацию по своим элементам. Результатом вызова
# метода .symmetric_difference() будет новое множество куда войдут только элементы из операции разности множеств.

# Метод .symmetric_difference_update() позволяет выполнить операцию «симметрическая разность».
# Результатом вызова метода .symmetric_difference_update() будет не создание нового множества, а изменение существующего.


""" Вывести одно число - количество различных чисел во всех этих списках """
a=set()
for _ in range(int(input())):
    a|= set(input().split())
print(len(a))

""" Даны два списка чисел. #  1 3 2 5  \n    4 3 2 6
Выведите все числа, которые входят как в первый, так и во второй список в порядке возрастания."""
print(*sorted(set(map(int, input().split()))&set(map(int, input().split()))))  # 2 3