"""from <название_модуля> import <имя_объекта>
при импорте модуля - этот модуль запускается, и запускается лишь один раз
для повторного запуска нужно использовать модуль importlib и функцию reload

import importlib
import math_func
import math_func
print(f'Модуль main содержит имя {__name__}')
importlib.reload(math_func)

вывод:
Модуль math_func содержит имя math_func
Модуль main содержит имя __main__
Модуль math_func содержит имя math_func

В атрибуте __name__ у импортируемого файла всегда будет лежать значение, равное названию этого файла.
Но файл, который является основным для всех остальных, при запуске в атрибуте __name__ всегда хранит значение __main__
И зная эту особенность, обычно в файлах ставят следующее условие:
if __name__ == '__main__':
   main_code
для того, чтобы код блока main_code выполнялся только тогда, когда этот модуль был запущен сам, а не когда его импортировали.
то есть, код что пишется после  if __name__ == '__main__':  будет работать только тогда, когда сам этот файл запускают,
но никак не при импорте. При импорте этого файла будет работать код, который выше  if __name__ == '__main__':
"""


""" МОДУЛИ """
print('вывод всех локальных данных')
import pprint   #  модуль нужен для красивого вывода
pprint.pprint(locals()) # locals() выводит все данные

print('_____________________')
print('МОДУЛЬ КАЛЕНДАРЬ')
import calendar
c = calendar.calendar(2000)
print(c)


from dir.modul import *  # если твой модуль находится в другой папке то нужно указать имя этой папки с точкой
from pprint import pprint  #  модуль нужен для красивого вывода
import sys                  #  модуль указывает системные пути программы
pprint(sys.path)             # системные пути
import importlib    #  модуль нужен для перезапуска другий модулей
# importlib.reload(dir.modul) # команда перезапуска
from dir.modul import *


import random
__all__ = ['a']  # !!!! в случаем импорта этого модуля, импортироваться будет только переменные в списке
a = [random.randint(-10, 10) for i in range(21)] #  рандомный список
count = [0] * 21 # создадим пустой список подсчёта дублей
for i in a: # переберём первый список
    count[i + 10] += 1 # поскольку есть отрицательные числа то увеличим их до нуля и посчитаем

if __name__ == '__main__': # данный код-строка позволит исполнять остальной код только при запуске этого файла,
    # а при его импорте будет  только верхняя часть
    print(a)
    print(count) # список количества дублей
    for i in range(21):
        if count[i] > 0: # возьмем из второго списка числа больше нуля
            print(i - 10, count[i], end=', ')
    print()