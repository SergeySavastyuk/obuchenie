# Как это работает и пример
from string import Template # импортируем из модуля строки -> шаблоны

template_string = Template('Лучший язык программирования - $lang!')   # template_string -> строка шаблона
prepared_string = template_string.substitute(lang='Python') # prepared_string -> подготовленная строка
#  Метод .substitute() осуществляет подстановку значений вместо идентификаторов.
#  Для этого он сопоставляет имена аргументов и имена идентификаторов.
print(prepared_string) # Вывод: Лучший язык программирования - Python!
""" то есть мы создаём строку-шаблон, где указываем переменные, которые в дальнейшем будем заменять как нам нужно. 
Все переменные начинаются со знака $. Потом обращаемся к этому шаблону методом substitute(), 
в котором прописываем переменные и их значения, которые и будут проставляться."""
# Если Вам необходимо использовать символ «$» вне идентификатора, его необходимо экранировать,
# то есть поставить перед ним ещё один такой же символ.


"""фигурные скобки. «Идентификатор считается законченным тогда, когда встретился первый символ, не удовлетворяющий 
требованиям предыдущего пункта». Таким символом, чаще всего, является пробел. Но, что, если у Вас, в том месте, 
где продолжается шаблон, должна располагаться обычная буква или цифра? 
Да, здесь и пригодятся фигурные скобки для отделения идентификатора"""
# template_string = Template('Лучший язык программирования - $langsdf!') # после переменной lang идёт сразу другой символ - будет ошибка
template_string = Template('Лучший язык программирования - ${lang}sdf!') # добавим фигурные скобки и всё заработает
prepared_string = template_string.substitute(lang='Python')
print(prepared_string) # Лучший язык программирования - Pythonsdf!
template_string = Template('Лучший язык программирования - $lang sdf!') # можно пробелом разделить их
prepared_string = template_string.substitute(lang='Python')
print(prepared_string) # Лучший язык программирования - Python sdf!
template_string = Template('Лучший язык программирования - $$$lang sdf!') # для добавления символа $ передним ставиться ещё один $
prepared_string = template_string.substitute(lang='Python')
print(prepared_string) # Лучший язык программирования - $Python sdf!


"""Метод .substitute() осуществляет подстановку значений вместо идентификаторов. 
Для этого он сопоставляет имена аргументов и имена идентификаторов.
Метод .substitute() строг и не прощает ошибок. Если Вы в шаблоне указали больше идентификаторов, 
чем передаёте аргументов, вернётся ошибка KeyError:"""
template_string = Template('$a и $b сидели на трубе')
print(template_string.substitute(a='Python', b='С++')) # Python и С++ сидели на трубе
# Кроме именованных аргументов, методу . substitute() можно передать словарь.
# Для этого необходимо применить распаковку словаря (оператор «**» перед именем словаря):
template_string = Template('$a и $b сидели на трубе')
my_dict = {'a': 'Python', 'b': 'С++'}
print(template_string.substitute(**my_dict)) # Python и С++ сидели на трубе


"""Метод .safe_substitute() – менее строгий аналог . substitute(). Он делает всё то же самое, но не поднимает 
описанные выше исключения: Если аргументов не хватает или их имена не соответствуют идентификаторам, 
метод .safe_substitute() просто не выполнит замену идентификатора на значение аргумента и вернёт строку «как есть»."""
template_string = Template('$a и $b сидели на трубе')
my_dict = {'a': 'Python',}
print(template_string.safe_substitute(**my_dict)) # Python и $b сидели на трубе


""" Переопределяем разделитель
Атрибут .delimiter содержит символ, используемый в качестве начального символа идентификатора:"""
template_string = Template('$a и $b сидели на трубе')
print(template_string.delimiter) # $
# Теперь попробуем его переопределить:
from string import Template
class NewTemplate(Template): # унаследуем Template в новом классе
    delimiter = 'Подставляю, значится, это:'  # и создадим в нём аттрибут в котором будет новый идентификатор
template_string = Template('Подставляю, значится, это:a и $b сидели на трубе') # обычный код без обращения к новому классу
print(template_string.safe_substitute(a='Python')) # Подставляю, значится, это:a и $b сидели на трубе
template_string = NewTemplate('Подставляю, значится, это:a и $b сидели на трубе') # теперь обратимся к новому классу,
# где переопределили идентификатор. Сам идентификатор исчезает и происходит замена значений в переменной "а"
print(template_string.safe_substitute(a='Python')) # Python и $b сидели на трубе
# Зачем это нужно? Представьте, что у Вас в шаблоне есть множество символов «$», которые должны быть частью шаблона,
# а не идентификатора. Если не переопределять разделитель, придётся вручную экранировать каждый из них. Ещё хуже
# ситуация становится, если программа получает эту строку из внешнего источника. Другой вариант, когда удобно
# переопределять разделитель, это шаблоны, в которых уже есть разделители, но для другого синтаксиса.


"""Переопределяем маску идентификатора, то есть само тело после разделителя идентификатора
Атрибут idpattern — это регулярное выражение, применяемое для проверки тела идентификатора, указанного в строке шаблона"""
from string import Template
class NewTemplate(Template):
    delimiter = ' ' # сам разделитель
    idpattern = 'Оля' # тело за разделителем
qwery = 'Села Оля на пенёк, съела Оля пирожок'
template_string = NewTemplate(qwery)
print(template_string.safe_substitute()) # Села Оля на пенёк, съела Оля пирожок
print(template_string.safe_substitute(Оля=' Лариса Петровна')) # Села Лариса Петровна на пенёк, съела Лариса Петровна пирожок




# добавить в строки
"""Из модуля string импортируйте следующие переменные: 
ascii_lowercase - строка, содержащая английский буквы англ. алфавита в нижнем регистре
ascii_uppercase - строка, содержащая английский буквы англ. алфавита в верхнем регистре
punctuation - строка, содержащая символы пунктуации"""


