# создадим класс
class Car:
    # аттрибуты класса и их значения
    models = ['BMW','AUDY','TOYOTA']
    colors = ['red','blue','green']

# создадим экземпляр класса (обязательно ставится вызов т.е ()) в котором уже хранятся аттрибуты этого класса
F = Car()
print(f'-Вызовем объект F и он укажет что является объектом класса Сar: {F}') # <__main__.Car object at 0x00000000026D7400>
print(f'-Через функцию getattr(название класса, название аттрибута в кавычках, значение по умолчанию если \n'
      f'такого аттрибута нет) получим значение переданного аттрибута: {getattr(Car,"models",None)}')
print(getattr(Car,"obyom",None))
print(getattr(F,'colors','не найден')) # ['red', 'blue', 'green'] - вызов ф-ии getattr на объект для получения атрибутов
print(getattr(F,'col','не найден')) # не найден
print(f'-чтобы получить перечень сразу всех аттрибутов класса пишем команду: название класса.__dict__')
# чтобы обновить/добавить словарь от __dict__ можно использовать __dict__.update(новый словарь)
print(Car.__dict__)
print(f'-для создания новых или изменения существующий аттрибутов воспользуемся функцией: setattr(название класса, аттрибут, новое значение аттрибута)')
setattr(Car,'wheels',4)
print(Car.wheels) # 4
print(f'-для удаления аттрибута используем функцию del: del название класса.аттрибут; или delattr()')
del Car.wheels
delattr(Car,'colors')
print(getattr(Car,'wheels',None)) # None
print(getattr(Car,'colors',None)) # None
print(Car.__dict__) # остался только аттрибут models: ['BMW', 'AUDY', 'TOYOTA']
print('_'*50)
print('-аттрибуты так же могут быть и у конкретного экземпляра класса')
F.a1 = 100 # добавим аттрибут к экземпляру
print(f'-экземпляр F, его личный аттрибут а1 и остальные: {F.__dict__}')